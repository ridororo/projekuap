#include <iostream>
#include <ncurses/ncurses.h>
#include <fstream>
#include <windows.h>
#include <iomanip>

using namespace std;

void burung(int y, int x){
	mvaddstr(y, x, "(O)>");
}

void pipa(int x, int gap_start, int ukuran, int tinggi_layar) {
	char simbol_pipa='#';
    for (int y = 0; y < tinggi_layar; ++y) {
        if (y < gap_start || y > gap_start + ukuran) {
            mvaddstr(y, x, "====");
        }
    }
}

bool fitur_game(int burung_y, int burung_x, int pipa_x, int gap_start, int ukuran, int tinggi_layar) {
    
    if (burung_y < 0 || burung_y >= tinggi_layar) {
        return true;
    }
   
    if (burung_x == pipa_x && (burung_y < gap_start || burung_y > gap_start + ukuran)) {
        return true;
    }
    return false;
    }

void score_game(int score) {
    
}

void flappy_game(int &score) {
    initscr();
    noecho();
    curs_set(FALSE);

    int tinggi_layar, lebar_layar;
    getmaxyx(stdscr, tinggi_layar, lebar_layar);

    int burung_x = lebar_layar / 4;
    int burung_y = tinggi_layar / 2;
    int pipa_x = lebar_layar;
    int gap_start = tinggi_layar/3;
    int ukuran = 10;
    
    int kecepatan = 0;
    int gravitasi = 1;
    int kekuatan_lompat = -1;
    score = 0;
	
	
    nodelay(stdscr, TRUE);

    
	
	bool game_over = false;

        while (!game_over) {
        clear();

        
        burung(burung_y, burung_x);

        
        pipa(pipa_x, gap_start, ukuran, tinggi_layar);
		game_over = fitur_game(burung_y, burung_x, pipa_x, gap_start, ukuran, tinggi_layar);
    
   		burung_y += kecepatan;
        kecepatan += gravitasi;

        
        pipa_x -= 5;
        if (pipa_x < 0) {
            pipa_x = lebar_layar;
            gap_start = rand() % (tinggi_layar - ukuran - 1);
            score+=10;
        }
        
        mvprintw(0, 0, "Score: %d", score);

       
        int ch = getch();
        if (ch == ' ') {
            kecepatan = kekuatan_lompat;
        } else if (ch == 'q') {
            break; 
        }

        
        refresh();
        Beep(831,80);
    }

    nodelay(stdscr, false);
    clear();
      

}
    

void registrasi() {
    ofstream file, accList;
    mvprintw(10, 50, "------(Registrasi)------");
    mvprintw(12, 50, "Username: ");
    int maxKarakter = 100;
    char userInput[maxKarakter];
    
    int i = 0;
    while (1) {
        int ch = getch(); 
        
        if (ch == 10) {  
            break;
        }
        else if (ch == 127 || ch == 8 || ch == KEY_BACKSPACE) { 
            if (i > 0) {
                userInput[i - 1] = '\0'; 
                i--;
                printw("\b \b");  
                refresh();
            }
        }
        else if (i < maxKarakter - 1) {  
            userInput[i++] = ch;  
            printw("%c", ch);  
            refresh();
        }
    }
    userInput[i] = '\0';  
    
    string userRegs = userInput;
    file.open(userRegs + ".txt");
    file << 0;  
    file.close();
    
    accList.open("ListAccount.txt", ios::app);
    accList << userRegs << endl;
    accList.close();
    
    clear();
    mvprintw(12, 50, "Registrasi Selesai");
    refresh(); 
    getch();
}

void login(bool &loginSuccess, string &user) {
    ifstream file;
    mvprintw(10, 50, "------(LOGIN)------");
    mvprintw(12, 50, "Username: ");
    refresh();
    int maxKarakter = 100;
    char userInpt[maxKarakter];
    string userData;
    int i = 0;
    while (1) {
        int ch = getch(); 
        
        if (ch == 10) {  
            break;
        }
        else if (ch == 127 || ch == 8 || ch == KEY_BACKSPACE) { 
            if (i > 0) {
                userInpt[i - 1] = '\0'; 
                i--;
                printw("\b \b");  
                refresh();
            }
        }
        else if (i < maxKarakter - 1) {  
            userInpt[i++] = ch;  
            printw("%c", ch);  
            refresh();
        }
    }
    userInpt[i] = '\0';
    string userLog = userInpt;
    file.open("ListAccount.txt");
    bool exist = false;
    while (file >> userData) {
        if (userLog == userData) {
            exist = true;
        }
    }
    file.close();
    
    clear();
    if (exist) {
        file.open(userLog + ".txt");
        mvprintw(12, 50, "Login Berhasil");
        refresh();
        loginSuccess = true; 
		user=userLog; 
        getch();
        file.close();
    } else {
        mvprintw(12, 45, "Login Gagal, pastikan username anda benar");
        refresh();
        loginSuccess = false;  
        getch();
    }
}
void menu(WINDOW *menu_win, int pilihanTerpilih, const char *opsi[], int jumlahOpsi);
void loadingBar(){
    
initscr();
for (int i=0; i<1; i++) {
mvprintw(12, 50, "Loading...");
mvprintw(13, 50, "------------------"); 
mvprintw(14, 50, "|                |");
mvprintw(15, 50, "------------------");

for (int f=1; f<17; f++) {
mvprintw(14, 50 + f, ">");
refresh(); 
Beep(831,50);
Beep(880,50); 
}
}
}


int main(){
	system("color C");
	initscr();
	clear();
    noecho();
    
    char choice;
    bool loginSuccess = false;  
    string user;

    while (!loginSuccess) {  
    clear();
        mvprintw(10, 40, "Login Terlebih dahulu/ Register untuk username baru");
        mvprintw(11, 40, "1. Login");
        mvprintw(12, 40, "2. Register");
        mvprintw(13, 40, "Pilih [1/2]: ");
        choice = getch();
        if (choice == '1') {
            clear();
            login(loginSuccess,user);  
        } else if (choice == '2') {
            clear();
            registrasi();
        } else {
            continue;  
        }
    }

	clear();
	noecho();
	cbreak();
	int awalX = 50, awalY = 10; 
	int lebar = 16, tinggi = 5;
	
	WINDOW *menu_win = newwin(tinggi, lebar, awalY, awalX);
	keypad(menu_win, TRUE);
	
	const char* userChar=user.c_str();
	
	
	const char *opsi[] = {
	"|    Start   |", 
	"|LeaderBoard |",
	"|    Exit    |" 
	
	};
	int jumlahOpsi = sizeof(opsi) / sizeof(char *);
	int pilihanTerpilih = 0;
	int pilihan = -1;
	
	
    keypad(menu_win, TRUE);
	
	int score;
	int tinggi_layar, lebar_layar;
    getmaxyx(stdscr, tinggi_layar, lebar_layar);
	
	while (1){
		box (menu_win,0,0);
		mvprintw(8, 44, "Silahkan Pilih Menu Di Bawah");
		mvprintw(5, 39, ">>>Selamat Datang di Menu Permainan, %s<<<",userChar);
		refresh();
		menu(menu_win, pilihanTerpilih, opsi, jumlahOpsi);
		int tombol = wgetch(menu_win);
		switch (tombol){
			case KEY_UP :
				if (pilihanTerpilih == 0)
				pilihanTerpilih = jumlahOpsi - 1;
				else 
				--pilihanTerpilih;
				break;
			case KEY_DOWN:
				if (pilihanTerpilih == jumlahOpsi - 1)
				pilihanTerpilih = 0;
				else
				++pilihanTerpilih;
				break;
			case 10:
				pilihan = pilihanTerpilih;
				break;
		
		}
		
		clear();
		
		if (pilihan == 0) { 
            loadingBar();
            clear ();
            mvprintw(14,35," Selamat datang di Flappy Bird tekan spasi untuk mulai ");
            char spasi=getch();
            if(spasi==' '){
            	flappy_game(score); 
            	
            	mvprintw(11,50, "Burung %s tewas", userChar);
            	refresh();
            	Beep(100,1000);
            	Beep(500,1000);
            	Beep(400,1000);
            	Beep(500,1000);
            	clear();
            	mvprintw(11, 50,  "GAME OVER! Final Score: %d", score);
            	refresh();
  				mvprintw(12, 45,"...Klik Apapun Untuk Melanjutkan...");
  				
    			refresh();
    			getch();

			    ofstream file("score.txt", ios::app);
    			if (file.is_open()) {
        			file <<setw(30)<<left<<user<<setw(30)<<left<< score << endl;
       			 	file.close();
    			}
			}
            clear();
            pilihan=-1;
            continue;
    
        }else if(pilihan==1){
        	endwin();
		system("cls");
        	cout<<"---------------(LeaderBoard)---------------"<<endl;
        	cout<<setw(30)<<left<<"User"<<setw(30)<<"Score"<<endl;
        	char kamuNanya;
        	ifstream file("score.txt",ios::app);
        	while(!file.eof()){
				file.get(kamuNanya);
				cout<<kamuNanya;
			}
			cin.get();
			initscr();
			pilihan=-1;
        	
        	
		}else if (pilihan == 2){
        	clear();
        	mvprintw(15,40,"Sampai jumpa dan terimakasih...");
        	refresh();
        	getch();
			break;
		}
	}
	clear();
	loadingBar();
	clrtoeol();
	refresh();
	endwin();
	return 0;
} 

void menu(WINDOW *menu_win, int pilihanTerpilih, const char *opsi[], int jumlahOpsi){

  for (int i = 0; i < jumlahOpsi; i++){
	if (i == pilihanTerpilih)
	wattron(menu_win, A_REVERSE);
	mvwprintw(menu_win, i + 1, 1, opsi[i]);
	wattroff(menu_win, A_REVERSE);
}
wrefresh(menu_win);
}
